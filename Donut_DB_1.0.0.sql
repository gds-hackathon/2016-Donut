--
-- Script was generated by Devart dbForge Studio for MySQL, Version 6.3.358.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2016/10/21 19:31:22
-- Server version: 5.7.15-log
-- Client version: 4.1
--


-- 
-- Set default database
--
USE donut;

--
-- Definition for table customer
--
CREATE TABLE IF NOT EXISTS customer (
  CustomerKey int(11) NOT NULL AUTO_INCREMENT,
  FirstName varchar(50) DEFAULT NULL,
  LastName varchar(50) DEFAULT NULL,
  Email varchar(50) DEFAULT NULL,
  Mobile varchar(255) DEFAULT NULL,
  Balance varchar(255) DEFAULT '100',
  FrozenAmount decimal(8, 2) DEFAULT 0.00,
  PRIMARY KEY (CustomerKey)
)
ENGINE = INNODB
AUTO_INCREMENT = 18
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
COMMENT = 'New user for restrant '
ROW_FORMAT = DYNAMIC;

--
-- Definition for table level
--
CREATE TABLE IF NOT EXISTS level (
  LevelKey int(11) NOT NULL AUTO_INCREMENT,
  ShortName varchar(50) DEFAULT NULL,
  Description varchar(255) DEFAULT NULL,
  PRIMARY KEY (LevelKey)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Definition for table restaurant
--
CREATE TABLE IF NOT EXISTS restaurant (
  RestaurantKey int(11) NOT NULL AUTO_INCREMENT,
  Name varchar(50) DEFAULT NULL,
  Discount varchar(255) DEFAULT NULL,
  PRIMARY KEY (RestaurantKey)
)
ENGINE = INNODB
AUTO_INCREMENT = 4
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Definition for table transaction
--
CREATE TABLE IF NOT EXISTS transaction (
  TransactionKey int(11) NOT NULL AUTO_INCREMENT,
  Amount decimal(10, 0) DEFAULT NULL,
  CreateDate datetime DEFAULT NULL,
  RestaurantKey int(11) DEFAULT NULL,
  CustomerKey int(11) DEFAULT NULL,
  PRIMARY KEY (TransactionKey)
)
ENGINE = INNODB
AUTO_INCREMENT = 5
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci
ROW_FORMAT = DYNAMIC;

--
-- Definition for table user
--
CREATE TABLE IF NOT EXISTS user (
  UserKey int(11) NOT NULL AUTO_INCREMENT,
  UserName varchar(50) DEFAULT NULL,
  Password varchar(255) DEFAULT NULL,
  CustomerKey int(11) DEFAULT NULL,
  LevelKey int(11) DEFAULT NULL,
  PRIMARY KEY (UserKey)
)
ENGINE = INNODB
AUTO_INCREMENT = 18
AVG_ROW_LENGTH = 963
CHARACTER SET utf8
COLLATE utf8_general_ci
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Definition for procedure getRestaurantList
--
CREATE DEFINER = 'root'@'%'
PROCEDURE getRestaurantList (OUT count int)
BEGIN
  SET @rowindex = 0;
  SET @strsql = CONCAT('select sql_calc_found_rows @rowindex:=@rowindex+1 as rownumber,', "r.Name,
    r.Discount", ' from ', 'restaurant r');
  PREPARE strsql FROM @strsql;
  EXECUTE strsql;
  DEALLOCATE PREPARE strsql;
  SET count = FOUND_ROWS();


END
$$

--
-- Definition for procedure getTransactionsPerRestaurant
--
CREATE DEFINER = 'root'@'%'
PROCEDURE getTransactionsPerRestaurant (IN restaurantKey int, OUT count varchar(255))
BEGIN

  SET @rowindex = 0;
  SET @strsql = CONCAT('select sql_calc_found_rows @rowindex:=@rowindex+1 as rownumber,', 'r.Name AS RestaurantName,',
  'r.Discount AS RestaurantDiscount,', 'CONCAT_WS(\' \',c.LastName,c.FirstName) AS EmployeeName,', 't.Amount,', 't.CreateDate', ' from ', 'transaction t INNER JOIN restaurant r ON r.RestaurantKey=t.RestaurantKey INNER JOIN customer c ON c.CustomerKey=t.CustomerKey', ' WHERE t.RestaurantKey=', restaurantKey);
  PREPARE strsql FROM @strsql;
  EXECUTE strsql;
  DEALLOCATE PREPARE strsql;
  SET count = FOUND_ROWS();

END
$$

--
-- Definition for procedure getTransactionsPerUser
--
CREATE DEFINER = 'root'@'%'
PROCEDURE getTransactionsPerUser (IN CustomerKey int, OUT count int)
BEGIN

  DECLARE foundCustomerKey int;
  SET @rowindex = 0;
  SET @strsql = CONCAT('select sql_calc_found_rows @rowindex:=@rowindex+1 as rownumber,', 'r.Name AS RestaurantName,',
  'r.Discount AS RestaurantDiscount,', 't.Amount,', 't.CreateDate', ' from ', 'transaction t INNER JOIN restaurant r ON r.RestaurantKey=t.RestaurantKey INNER JOIN customer c ON c.CustomerKey=t.CustomerKey', ' WHERE t.CustomerKey=', CustomerKey);
  PREPARE strsql FROM @strsql;
  EXECUTE strsql;
  DEALLOCATE PREPARE strsql;
  SET count = FOUND_ROWS();
END
$$

--
-- Definition for procedure insertRestaurant
--
CREATE DEFINER = 'root'@'%'
PROCEDURE insertRestaurant (IN name varchar(255), IN discount varchar(255))
BEGIN
  DECLARE resCount int DEFAULT 0;
  -- check if restraut existing
  SELECT
    COUNT(1) INTO resCount
  FROM restaurant r
  WHERE r.name = name;

  -- insert the record
  IF resCount = 0 THEN
    INSERT INTO restaurant (name, discount)
      VALUES (name, discount);
  END IF;
END
$$

--
-- Definition for procedure insertTransaction
--
CREATE DEFINER = 'root'@'%'
PROCEDURE insertTransaction (IN amount int, IN restaurantKey int, IN customerKey varchar(255))
BEGIN
  DECLARE totalAmount int;
  -- insert transaction
  INSERT INTO transaction (amount, CreateDate, restaurantKey, customerKey)
    VALUES (amount, CURRENT_TIMESTAMP(), restaurantKey, customerKey);
  -- get the user's amount
  SELECT
    c.Balance INTO totalAmount
  FROM customer c
  WHERE c.customerKey = customerKey;

  UPDATE customer c
  SET c.FrozenAmount = totalAmount - amount
  WHERE c.customerKey = customerKey;
END
$$

--
-- Definition for procedure login
--
CREATE DEFINER = 'root'@'%'
PROCEDURE login (IN username varchar(255), IN passwd varchar(255), OUT customerkey int)
BEGIN
  -- insert database
  DECLARE foundCustomerKey int;
  SET foundCustomerKey = 0;

  SELECT
    u.CustomerKey INTO foundCustomerKey
  FROM USER u
  WHERE u.username = username
  AND u.Password = passwd;

  SET customerkey = foundCustomerKey;

END
$$

--
-- Definition for procedure register
--
CREATE DEFINER = 'root'@'%'
PROCEDURE register (IN firstname varchar(255), IN lastname varchar(255), IN email varchar(255), IN phone varchar(255), IN password varchar(255))
BEGIN

  -- the insert users
  DECLARE returnUserCount int DEFAULT 0;

  -- if the customer found from database side
  SELECT
    COUNT(1) INTO returnUserCount
  FROM customer c
  WHERE c.Mobile = phone
  OR c.email = email;
  IF returnUserCount = 0 THEN
    -- insert the data into db
    INSERT INTO customer (firstname, lastname, email, Mobile, Balance, FrozenAmount)
      VALUES (firstname, lastname, email, phone, 100, 0)
    ON DUPLICATE KEY UPDATE Mobile = VALUES(Mobile);

    SET @insertcustomerid = LAST_INSERT_ID();
    -- insert the user table
    INSERT INTO USER (UserName, password, CustomerKey, LevelKey)
      VALUES (phone, password, @insertcustomerid, 2);
  ELSE   -- if the use is existing
    UPDATE customer c
    SET c.FirstName = firstname,
        c.LastName = lastname,
        c.Email = email,
        c.Mobile = phone
    WHERE c.Mobile = phone;
    UPDATE USER u
    SET u.UserName = phone,
        u.Password = password
    WHERE u.UserName = phone;

  END IF;
-- SET CustomerKey=@insertcustomerid;
END
$$

DELIMITER ;